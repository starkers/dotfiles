#!/usr/bin/env bash
#
#  kcns == "Kube Change NamesSpace"
#
#
#             DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#                     Version 2, December 2004
#
#  Copyright (C) 2021 David Stark <david@starkers.org>
#
#  Everyone is permitted to copy and distribute verbatim or modified
#  copies of this license document, and changing it is allowed as long
#  as the name is changed.
#
#             DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#   0. You just DO WHAT THE FUCK YOU WANT TO.

######## OK legal over..
#
# Q: What does this do?
# A: it creates a new context in the format: "$CLUSTER/$NAMESPACE" and sets it as current
#
# Q: why not "krew change-ns/kubectx/other things"
# A: I don't like the complex name schemas EG: $NAMESPACE/$CLUSTER/$EMAIL
#    - 1. this makes terribly LONG context names
#    - 2. I don't need to know my email address thanks (and when I Impersonate I act like a grown up)
#    - 3. the heirarchy in my brain is "THE CLUSTER" contains "THE NAMESPACE".. ergo:
#
#         $CLUSTER/$NAMESPACE
#
# Q: can I buy you beer?
# A: yes please
#
# Usage:
#
# are you feeling like you're gonna wanna change into this namespace frequently?
# then supply the script the namespace you want as an argument.. EG:
#
# kcns <namespace-you-want>
#
#
# are you feeling lazy or is it a rather long/random namespace u don't care to recall?
# kcns will then present you with a nice little list of namespaces and will let drop you into
# fzf to select the namespace
#
# kcns

# "say"  just says stuff
say() {
	echo -e "\e[32m: $*\e[0m" >&2
}

# "die" will accept some input, say it.. and the exit with an error return-code of 1
die() {
	echo -e "\e[31m$*\e[0m"
	exit 1
}

# "err" is like die (its red) but without exiting
err() {
	echo -e "\e[31m# err: $*\e[0m"
}

# "try" accepts a command line to run.. it will run that ocmmand and "die" if that failed
#       most importantly it lets you see whats being run cleanly and lets you select when
#       failure should be checked for
try() {
	echo -e "\e[33m\$ $@\e[0m"
	"$@" || die "cannot $*"
}

set -e

function usage() {
	fname="$(sed "s+.*\/++" <<<$0)"
	cat <<-EOF
		Hello and welcome to the official

		 "Kube Change NS" docs:

		---
		Usage:
		$ $fname <namespace-you-want>
		---

		ðŸ™ƒ <-- obligitory emoji.. now this project is cool

		Have a nice day
	EOF

	exit 0
}

function pick_namespace() {
	DATA="$(kubectl get namespace -o=custom-columns=NAME:.metadata.name 2>/dev/null | sort -r | grep -v ^NAME | fzf)"
	RC=$?
	if [ $RC -gt 0 ]; then
		echo "Error running 'kubectl get namespace'"
		exit $RC
	fi
	echo ${DATA}
}

function get_current_user() {
	## gotta loop thru the contexts to fine the one with the correct name so we can extract the user used
	local CURRENT_CONTEXT="$(kubectl config current-context)"
	local CONTEXT_NAMES="$(kubectl config view -o=jsonpath='{.contexts[*].name}')"
	local i=0
	local INDEX=0
	for a in $CONTEXT_NAMES; do
		if [ "$a" == "$CURRENT_CONTEXT" ]; then
			INDEX=$i
			USER="$(kubectl config view -o=jsonpath={.contexts[${INDEX}].context.user})"
			break
		fi
		((i = i + 1))
	done
	if [ $? -gt 0 ]; then
		echo nil
	else
		say current contexts username == ${USER}
		echo ${USER}
	fi
}

function get_current_cluster() {
	local STRING="$(kubectl config current-context)"

	if grep -q "/" <<<${STRING}; then
		# "/" chars detected, lets assume the cluster/root context is the LEFT
		local CLUSTER="$(cut -d "/" -f 1 <<<${STRING})"
	else
		local CLUSTER=$STRING
	fi
	echo $CLUSTER
}

function config_set_context() {
	try kubectl \
		config set-context \
		"${3}" \
		--cluster=${1} \
		--namespace=${2}
}

function config_set_context_with_user() {
	try kubectl \
		config set-context \
		"${3}" \
		--cluster=${1} \
		--namespace=${2} \
		--user=${4}
}

function config_use_context() {
	try kubectl config use-context "${1}"
}

###################
if [ X$1 == "X-h" ]; then usage; fi
if [ X$1 == "X--help" ]; then usage; fi

if [ ! X$1 == X ]; then
	NAMESPACE="${1}"
else
	NAMESPACE=$(pick_namespace)
fi

CLUSTER=$(get_current_cluster)
USERNAME="$(get_current_user)"

echo c=${CLUSTER},u=${USERNAME}

if [ X${USERNAME} == Xnil ]; then
	# no username.. ok lets roll without it.. (tsk tsk)
	NEW_CONTEXT="${CLUSTER}/${NAMESPACE}"
	config_set_context "${CLUSTER}" "${NAMESPACE}" "${NEW_CONTEXT}"
else
	# you are a good person with a username
	NEW_CONTEXT="${CLUSTER}/${NAMESPACE}"
	config_set_context_with_user "${CLUSTER}" "${NAMESPACE}" "${NEW_CONTEXT}" "${USERNAME}"
fi

# use it
config_use_context "${NEW_CONTEXT}"
