#!/usr/bin/env bash

# simple script that uses fzf to allow you to switch between various gcloud stuff
#
# - account
# - account-and-project
# - account-project-and-cluster
# - cluster
# - project
# - project-and-cluster
#
# just run it and see..

declare -a deps=(
	awk
	cut
	fzf
	gcloud
)

for dep in "${deps[@]}"; do
	hash ${dep} 2>/dev/null
	if [ $? -gt 0 ]; then
		echo "error.. please install ${dep} to use this script"
		exit 111
	fi
done

args="--height=20% --no-sort --tac"
PROJECT_CURRENT="$(gcloud config get-value project)"
ACCOUNT_CURRENT="$(gcloud config get-value account)"
cat <<EOF
###############################################
### What do you want to switch between?
###############################################
## Current Project: ${PROJECT_CURRENT}
## Current Account: ${ACCOUNT_CURRENT}
###############################################
EOF

pick=$(
	cat <<EOF | fzf ${args}
account
account-and-project
account-project-and-cluster
cluster
project
project-and-cluster
rename-kube
EOF
)

set_account() {
	local SELECTED_ACCOUNT="$(gcloud auth list --format="value(account)" | fzf ${args})"
	echo "[] exec: gcloud config set account ${SELECTED_ACCOUNT}"
	gcloud config set account ${SELECTED_ACCOUNT}
}

set_project() {
	local RAW="$(gcloud projects list | fzf ${args})"
	local RAW_PROJECT="$(echo ${RAW} | awk '{print $1}')"
	if [ ! "X${PROJECT_CURRENT}" == "X${RAW_PROJECT}" ]; then
		echo "[] exec: gcloud config set project ${RAW_PROJECT}"
		gcloud config set project ${RAW_PROJECT}
	fi
}

set_cluster() {
	PROJECT_CURRENT="$(gcloud config get-value project)"
	local RAW="$(gcloud container clusters list 2>/dev/null | egrep "RUNNING|STATUS" | fzf ${args})"
	local RAW_NAME="$(echo ${RAW} | awk '{print $1}')"
	# local RAW_LOCATION="$(echo ${RAW} | awk '{print $2}' | cut -d "-" -f 1-2)"
	local RAW_LOCATION="$(echo ${RAW} | awk '{print $2}')"
	echo "[] exec: gcloud container clusters get-credentials ${RAW_NAME} --region ${RAW_LOCATION} --project ${PROJECT_CURRENT}"
	gcloud container clusters get-credentials ${RAW_NAME} --region ${RAW_LOCATION} --project ${PROJECT_CURRENT}
	# rename_kubecontext
}

rename_kubecontext(){
  local CONTEXT="$(kubectl config current-context)"
cat <<EOF
##############################################
### Rename the kube context?
##############################################
#
# Current context name: "${CONTEXT}"
#
##############################################
EOF
local PICK=$(
	cat <<EOF | fzf ${args}
dev
staging
sut
uat
demo
prod
live
sandbox
pick my own name
no thanks
EOF
)
case $PICK in
  "pick my own name")
    echo "picking your own name"
    PICK=""
    read -r -p "Enter the new name: " PICK
    if [ "X${PICK}" != "X" ]; then
      echo "renaming from ${CONTEXT} -> ${PICK}"
      kubectl config delete-context "${PICK}" 2>/dev/null
      sed -i "s+${CONTEXT}+${PICK}+g" "${KUBECONFIG:-${HOME}/.kube/config}"
    else
      echo "nothing set, doing nothing"
    fi
    ;;
  "no thanks")
    echo "doing nothing"
    ;;
  *)
    echo "renaming from ${CONTEXT} -> ${PICK}"
    kubectl config delete-context "${PICK}" 2>/dev/null
    sed -i "s+${CONTEXT}+${PICK}+g" "${KUBECONFIG:-${HOME}/.kube/config}"
    ;;
esac


}

case $pick in
account)
	echo "picked account"
	set_account
	;;
account-and-project)
	echo "picked account"
	set_account
	set_project
	;;
account-project-and-cluster)
	echo "picked account"
	set_account
	set_project
	set_cluster
	;;
project)
	echo "picked project"
	set_project
	;;
cluster)
	echo "picked cluster"
	set_cluster
	;;
project-and-cluster)
	echo "picked project + cluster"
	set_project
	set_cluster
	;;
# rename-kube)
#   rename_kubecontext
#   ;;
esac
