#!/usr/bin/env python3

import subprocess
import sys
import json

# python3 -m pip install --user pydymenu
from pydymenu import fzf

def logGood(input):
    print("good: {}".format(input))
def logBad(input):
    print("bad : {}".format(input))

def aksLogin(clusterName, resourceGroup, admin=True):
    command = [
        "az",
        "aks",
        "get-credentials",
        "--overwrite-existing",
        "--name",
        clusterName,
        "--resource-group",
        resourceGroup
    ]
    if admin:
        command.append("--admin")
        print("using --admin to log in")
    print("Running command:")
    print(*command)
    result = subprocess.run(command, stdout=subprocess.PIPE)
    if result.returncode != 0:
        logBad("error running cmd: {}".format(command))
        logBad("return code: {}".format(result.returncode))
        logBad(result.stdout)
        logBad(result.stderr)
        sys.exit(1)

def getClusters():
    command = [
            "az",
            "aks",
            "list",
            ]
    print("Running command:")
    print(*command)
    result = subprocess.run(command, stdout=subprocess.PIPE)
    if result.returncode != 0:
        logBad("error running cmd: {}".format(command))
        logBad("return code: {}".format(result.returncode))
        logBad(result.stdout)
        logBad(result.stderr)
        sys.exit(1)
    return result.stdout


if __name__ == "__main__":
    clusterListRawJson = getClusters()
    data = json.loads(clusterListRawJson)
    clusterClount = len(data)
    if clusterClount == 0:
        logGood("no clusters see.. please examine output of 'az aks list' to diagnose")
        sys.exit(0)
    else:
        with_dict = {}
        for cluster in data:
            # logGood(cluster['dnsPrefix'])
            name = cluster['name']
            # logGood(cluster['location'])
            # logGood(cluster['nodeResourceGroup'])
            rg = cluster['resourceGroup']
            # items.append(cluster['name'])
            with_dict[name] = rg
        print(with_dict)
        
        choice = fzf(
            [name for name, _ in with_dict.items()],
            prompt="Which option? ",
        )
        if choice:
            resourceGroup = with_dict[choice[0]]
            name = choice[0]
            print("you selected: cluster: {}, resouceGroup: {}".format(
                name, resourceGroup))
            aksLogin(name, resourceGroup, admin=True)
        else:
            print("No selection made.")

